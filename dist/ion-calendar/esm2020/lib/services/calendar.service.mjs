import { Inject, Injectable, Optional } from '@angular/core';
import moment from 'moment';
import { defaults, pickModes } from '../config';
import { DEFAULT_CALENDAR_OPTIONS } from './calendar-options.provider';
import * as i0 from "@angular/core";
const isBoolean = (input) => input === true || input === false;
export class CalendarService {
    constructor(defaultOpts) {
        this.defaultOpts = defaultOpts;
    }
    get DEFAULT_STEP() {
        return 12;
    }
    safeOpt(calendarOptions = {}) {
        const _disableWeeks = [];
        const _daysConfig = [];
        let { from = new Date(), to = 0, weekStart = 0, step = this.DEFAULT_STEP, id = '', cssClass = '', closeLabel = 'CANCEL', doneLabel = 'DONE', monthFormat = 'MMM YYYY', title = 'CALENDAR', defaultTitle = '', defaultSubtitle = '', autoDone = false, canBackwardsSelected = false, closeIcon = false, doneIcon = false, showYearPicker = false, isSaveHistory = false, pickMode = pickModes.SINGLE, color = defaults.COLOR, weekdays = defaults.WEEKS_FORMAT, daysConfig = _daysConfig, disableWeeks = _disableWeeks, showAdjacentMonthDay = true, defaultEndDateToStartDate = false, clearLabel = null, maxMultiDates = null } = { ...this.defaultOpts, ...calendarOptions };
        return {
            id,
            from,
            to,
            pickMode,
            autoDone,
            color,
            cssClass,
            weekStart,
            closeLabel,
            closeIcon,
            doneLabel,
            doneIcon,
            canBackwardsSelected,
            isSaveHistory,
            disableWeeks,
            monthFormat,
            title,
            weekdays,
            daysConfig,
            step,
            showYearPicker,
            defaultTitle,
            defaultSubtitle,
            defaultScrollTo: calendarOptions.defaultScrollTo || from,
            defaultDate: calendarOptions.defaultDate || null,
            defaultDates: calendarOptions.defaultDates || null,
            defaultDateRange: calendarOptions.defaultDateRange || null,
            showAdjacentMonthDay,
            defaultEndDateToStartDate,
            clearLabel,
            maxMultiDates
        };
    }
    createOriginalCalendar(time) {
        const date = new Date(time);
        const year = date.getFullYear();
        const month = date.getMonth();
        const firstWeek = new Date(year, month, 1).getDay();
        const howManyDays = moment(time).daysInMonth();
        return {
            year,
            month,
            firstWeek,
            howManyDays,
            time: new Date(year, month, 1).getTime(),
            date: new Date(time),
        };
    }
    findDayConfig(day, opt) {
        if (!opt.daysConfig && opt.daysConfig.length <= 0)
            return null;
        return opt.daysConfig.find((n) => day.isSame(n.date, 'day'));
    }
    createCalendarDay(time, opt, month) {
        let _time = moment(time);
        let date = moment(time);
        let isToday = moment().isSame(_time, 'days');
        let dayConfig = this.findDayConfig(_time, opt);
        let _rangeBeg = moment(opt.from).valueOf();
        let _rangeEnd = moment(opt.to).valueOf();
        let isBetween = true;
        let disableWee = opt?.disableWeeks?.indexOf(_time.toDate().getDay()) !== -1;
        if (_rangeBeg > 0 && _rangeEnd > 0) {
            if (!opt.canBackwardsSelected) {
                isBetween = !_time.isBetween(_rangeBeg, _rangeEnd, 'days', '[]');
            }
            else {
                isBetween = moment(_time).isBefore(_rangeBeg) ? false : isBetween;
            }
        }
        else if (_rangeBeg > 0 && _rangeEnd === 0) {
            if (!opt.canBackwardsSelected) {
                let _addTime = _time.add(1, 'day');
                isBetween = !_addTime.isAfter(_rangeBeg);
            }
            else {
                isBetween = false;
            }
        }
        let _disable = false;
        if (dayConfig && isBoolean(dayConfig.disable)) {
            _disable = dayConfig.disable;
        }
        else {
            _disable = disableWee || isBetween;
        }
        let title = new Date(time).getDate().toString();
        if (dayConfig && dayConfig.title) {
            title = dayConfig.title;
        }
        else if (opt.defaultTitle) {
            title = opt.defaultTitle;
        }
        let subTitle = '';
        if (dayConfig && dayConfig.subTitle) {
            subTitle = dayConfig.subTitle;
        }
        else if (opt.defaultSubtitle) {
            subTitle = opt.defaultSubtitle;
        }
        return {
            time,
            isToday,
            title,
            subTitle,
            selected: false,
            isLastMonth: date.month() < (month ? month : 0),
            isNextMonth: date.month() > (month ? month : 0),
            marked: dayConfig ? dayConfig.marked || false : false,
            cssClass: dayConfig ? dayConfig.cssClass || '' : '',
            disable: _disable,
            isFirst: date.date() === 1,
            isLast: date.date() === date.daysInMonth(),
        };
    }
    createCalendarMonth(original, opt) {
        let days = new Array(6).fill(null);
        let len = original.howManyDays;
        for (let i = original.firstWeek; i < len + original.firstWeek; i++) {
            let itemTime = new Date(original.year, original.month, i - original.firstWeek + 1).getTime();
            days[i] = this.createCalendarDay(itemTime, opt);
        }
        let weekStart = opt.weekStart;
        if (weekStart === 1) {
            if (days[0] === null) {
                days.shift();
            }
            else {
                days.unshift(...new Array(6).fill(null));
            }
        }
        if (opt.showAdjacentMonthDay) {
            const _booleanMap = days.map(e => !!e);
            const thisMonth = moment(original.time).month();
            let startOffsetIndex = _booleanMap.indexOf(true) - 1;
            let endOffsetIndex = _booleanMap.lastIndexOf(true) + 1;
            for (startOffsetIndex; startOffsetIndex >= 0; startOffsetIndex--) {
                const dayBefore = moment(days[startOffsetIndex + 1].time)
                    .clone()
                    .subtract(1, 'd');
                days[startOffsetIndex] = this.createCalendarDay(dayBefore.valueOf(), opt, thisMonth);
            }
            if (!(_booleanMap.length % 7 === 0 && _booleanMap[_booleanMap.length - 1])) {
                for (endOffsetIndex; endOffsetIndex < days.length + (endOffsetIndex % 7); endOffsetIndex++) {
                    const dayAfter = moment(days[endOffsetIndex - 1].time)
                        .clone()
                        .add(1, 'd');
                    days[endOffsetIndex] = this.createCalendarDay(dayAfter.valueOf(), opt, thisMonth);
                }
            }
        }
        return {
            days,
            original: original,
        };
    }
    createMonthsByPeriod(startTime, monthsNum, opt) {
        let _array = [];
        let _start = new Date(startTime);
        let _startMonth = new Date(_start.getFullYear(), _start.getMonth(), 1).getTime();
        for (let i = 0; i < monthsNum; i++) {
            let time = moment(_startMonth)
                .add(i, 'M')
                .valueOf();
            let originalCalendar = this.createOriginalCalendar(time);
            _array.push(this.createCalendarMonth(originalCalendar, opt));
        }
        return _array;
    }
    wrapResult(original, pickMode) {
        let result;
        switch (pickMode) {
            case pickModes.SINGLE:
                result = this.multiFormat(original[0].time);
                break;
            case pickModes.RANGE:
                result = {
                    from: this.multiFormat(original[0].time),
                    to: this.multiFormat((original[1] || original[0]).time),
                };
                break;
            case pickModes.MULTI:
                result = original.map(e => this.multiFormat(e.time));
                break;
            default:
                result = original;
        }
        return result;
    }
    multiFormat(time) {
        const _moment = moment(time);
        return {
            time: _moment.valueOf(),
            unix: _moment.unix(),
            dateObj: _moment.toDate(),
            string: _moment.format(defaults.DATE_FORMAT),
            years: _moment.year(),
            months: _moment.month() + 1,
            date: _moment.date(),
        };
    }
}
CalendarService.ɵfac = function CalendarService_Factory(t) { return new (t || CalendarService)(i0.ɵɵinject(DEFAULT_CALENDAR_OPTIONS, 8)); };
CalendarService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CalendarService, factory: CalendarService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CalendarService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DEFAULT_CALENDAR_OPTIONS]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMvY2FsZW5kYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBVTVCLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUV2RSxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDO0FBR3BFLE1BQU0sT0FBTyxlQUFlO0lBRzFCLFlBQTBELFdBQWlDO1FBQ3pGLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxPQUFPLENBQUMsa0JBQXVCLEVBQUU7UUFDL0IsTUFBTSxhQUFhLEdBQWEsRUFBRSxDQUFDO1FBQ25DLE1BQU0sV0FBVyxHQUFnQixFQUFFLENBQUM7UUFDcEMsSUFBSSxFQUNGLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxFQUNqQixFQUFFLEdBQUcsQ0FBQyxFQUNOLFNBQVMsR0FBRyxDQUFDLEVBQ2IsSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQ3hCLEVBQUUsR0FBRyxFQUFFLEVBQ1AsUUFBUSxHQUFHLEVBQUUsRUFDYixVQUFVLEdBQUcsUUFBUSxFQUNyQixTQUFTLEdBQUcsTUFBTSxFQUNsQixXQUFXLEdBQUcsVUFBVSxFQUN4QixLQUFLLEdBQUcsVUFBVSxFQUNsQixZQUFZLEdBQUcsRUFBRSxF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LElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ3BCLE9BQU8sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFDNUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDckIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO1lBQzNCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO1NBQ3JCLENBQUM7SUFDSixDQUFDOzs4RUFoUVUsZUFBZSxjQUdNLHdCQUF3QjtxRUFIN0MsZUFBZSxXQUFmLGVBQWU7dUZBQWYsZUFBZTtjQUQzQixVQUFVOztzQkFJSSxRQUFROztzQkFBSSxNQUFNO3VCQUFDLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuaW1wb3J0IHtcbiAgQ2FsZW5kYXJPcmlnaW5hbCxcbiAgQ2FsZW5kYXJEYXksXG4gIENhbGVuZGFyTW9udGgsXG4gIENhbGVuZGFyTW9kYWxPcHRpb25zLFxuICBDYWxlbmRhclJlc3VsdCxcbiAgRGF5Q29uZmlnLFxufSBmcm9tICcuLi9jYWxlbmRhci5tb2RlbCc7XG5pbXBvcnQgeyBkZWZhdWx0cywgcGlja01vZGVzIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IERFRkFVTFRfQ0FMRU5EQVJfT1BUSU9OUyB9IGZyb20gJy4vY2FsZW5kYXItb3B0aW9ucy5wcm92aWRlcic7XG5cbmNvbnN0IGlzQm9vbGVhbiA9IChpbnB1dDogYW55KSA9PiBpbnB1dCA9PT0gdHJ1ZSB8fCBpbnB1dCA9PT0gZmFsc2U7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYWxlbmRhclNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRPcHRzOiBDYWxlbmRhck1vZGFsT3B0aW9ucztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KERFRkFVTFRfQ0FMRU5EQVJfT1BUSU9OUykgZGVmYXVsdE9wdHM6IENhbGVuZGFyTW9kYWxPcHRpb25zKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0cyA9IGRlZmF1bHRPcHRzO1xuICB9XG5cbiAgZ2V0IERFRkFVTFRfU1RFUCgpIHtcbiAgICByZXR1cm4gMTI7XG4gIH1cblxuICBzYWZlT3B0KGNhbGVuZGFyT3B0aW9uczogYW55ID0ge30pOiBDYWxlbmRhck1vZGFsT3B0aW9ucyB7XG4gICAgY29uc3QgX2Rpc2FibGVXZWVrczogbnVtYmVyW10gPSBbXTtcbiAgICBjb25zdCBfZGF5c0NvbmZpZzogRGF5Q29uZmlnW10gPSBbXTtcbiAgICBsZXQge1xuICAgICAgZnJvbSA9IG5ldyBEYXRlKCksXG4gICAgICB0byA9IDAsXG4gICAgICB3ZWVrU3RhcnQgPSAwLFxuICAgICAgc3RlcCA9IHRoaXMuREVGQVVMVF9TVEVQLFxuICAgICAgaWQgPSAnJyxcbiAgICAgIGNzc0NsYXNzID0gJycsXG4gICAgICBjbG9zZUxhYmVsID0gJ0NBTkNFTCcsXG4gICAgICBkb25lTGFiZWwgPSAnRE9ORScsXG4gICAgICBtb250aEZvcm1hdCA9ICdNTU0gWVlZWScsXG4gICAgICB0aXRsZSA9ICdDQUxFTkRBUicsXG4gICAgICBkZWZhdWx0VGl0bGUgPSAnJyxcbiAgICAgIGRlZmF1bHRTdWJ0aXRsZSA9ICcnLFxuICAgICAgYXV0b0RvbmUgPSBmYWxzZSxcbiAgICAgIGNhbkJhY2t3YXJkc1NlbGVjdGVkID0gZmFsc2UsXG4gICAgICBjbG9zZUljb24gPSBmYWxzZSxcbiAgICAgIGRvbmVJY29uID0gZmFsc2UsXG4gICAgICBzaG93WWVhclBpY2tlciA9IGZhbHNlLFxuICAgICAgaXNTYXZlSGlzdG9yeSA9IGZhbHNlLFxuICAgICAgcGlja01vZGUgPSBwaWNrTW9kZXMuU0lOR0xFLFxuICAgICAgY29sb3IgPSBkZWZhdWx0cy5DT0xPUixcbiAgICAgIHdlZWtkYXlzID0gZGVmYXVsdHMuV0VFS1NfRk9STUFULFxuICAgICAgZGF5c0NvbmZpZyA9IF9kYXlzQ29uZmlnLFxuICAgICAgZGlzYWJsZVdlZWtzID0gX2Rpc2FibGVXZWVrcyxcbiAgICAgIHNob3dBZGphY2VudE1vbnRoRGF5ID0gdHJ1ZSxcbiAgICAgIGRlZmF1bHRFbmREYXRlVG9TdGFydERhdGUgPSBmYWxzZSxcbiAgICAgIGNsZWFyTGFiZWwgPSBudWxsLFxuICAgICAgbWF4TXVsdGlEYXRlcyA9IG51bGxcbiAgICB9ID0geyAuLi50aGlzLmRlZmF1bHRPcHRzLCAuLi5jYWxlbmRhck9wdGlvbnMgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZCxcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICAgIHBpY2tNb2RlLFxuICAgICAgYXV0b0RvbmUsXG4gICAgICBjb2xvcixcbiAgICAgIGNzc0NsYXNzLFxuICAgICAgd2Vla1N0YXJ0LFxuICAgICAgY2xvc2VMYWJlbCxcbiAgICAgIGNsb3NlSWNvbixcbiAgICAgIGRvbmVMYWJlbCxcbiAgICAgIGRvbmVJY29uLFxuICAgICAgY2FuQmFja3dhcmRzU2VsZWN0ZWQsXG4gICAgICBpc1NhdmVIaXN0b3J5LFxuICAgICAgZGlzYWJsZVdlZWtzLFxuICAgICAgbW9udGhGb3JtYXQsXG4gICAgICB0aXRsZSxcbiAgICAgIHdlZWtkYXlzLFxuICAgICAgZGF5c0NvbmZpZyxcbiAgICAgIHN0ZXAsXG4gICAgICBzaG93WWVhclBpY2tlcixcbiAgICAgIGRlZmF1bHRUaXRsZSxcbiAgICAgIGRlZmF1bHRTdWJ0aXRsZSxcbiAgICAgIGRlZmF1bHRTY3JvbGxUbzogY2FsZW5kYXJPcHRpb25zLmRlZmF1bHRTY3JvbGxUbyB8fCBmcm9tLFxuICAgICAgZGVmYXVsdERhdGU6IGNhbGVuZGFyT3B0aW9ucy5kZWZhdWx0RGF0ZSB8fCBudWxsLFxuICAgICAgZGVmYXVsdERhdGVzOiBjYWxlbmRhck9wdGlvbnMuZGVmYXVsdERhdGVzIHx8IG51bGwsXG4gICAgICBkZWZhdWx0RGF0ZVJhbmdlOiBjYWxlbmRhck9wdGlvbnMuZGVmYXVsdERhdGVSYW5nZSB8fCBudWxsLFxuICAgICAgc2hvd0FkamFjZW50TW9udGhEYXksXG4gICAgICBkZWZhdWx0RW5kRGF0ZVRvU3RhcnREYXRlLFxuICAgICAgY2xlYXJMYWJlbCxcbiAgICAgIG1heE11bHRpRGF0ZXNcbiAgICB9O1xuICB9XG5cbiAgY3JlYXRlT3JpZ2luYWxDYWxlbmRhcih0aW1lOiBudW1iZXIpOiBDYWxlbmRhck9yaWdpbmFsIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZSk7XG4gICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICBjb25zdCBmaXJzdFdlZWsgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkuZ2V0RGF5KCk7XG4gICAgY29uc3QgaG93TWFueURheXMgPSBtb21lbnQodGltZSkuZGF5c0luTW9udGgoKTtcbiAgICByZXR1cm4ge1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZmlyc3RXZWVrLFxuICAgICAgaG93TWFueURheXMsXG4gICAgICB0aW1lOiBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkuZ2V0VGltZSgpLFxuICAgICAgZGF0ZTogbmV3IERhdGUodGltZSksXG4gICAgfTtcbiAgfVxuXG4gIGZpbmREYXlDb25maWcoZGF5OiBhbnksIG9wdDogYW55KTogYW55IHtcbiAgICBpZiAoIW9wdC5kYXlzQ29uZmlnICYmICBvcHQuZGF5c0NvbmZpZy5sZW5ndGggPD0gMCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG9wdC5kYXlzQ29uZmlnLmZpbmQoKG46IHsgZGF0ZTogYW55OyB9KSA9PiBkYXkuaXNTYW1lKG4uZGF0ZSwgJ2RheScpKTtcbiAgfVxuXG4gIGNyZWF0ZUNhbGVuZGFyRGF5KHRpbWU6IG51bWJlciwgb3B0OiBDYWxlbmRhck1vZGFsT3B0aW9ucywgbW9udGg/OiBudW1iZXIpOiBDYWxlbmRhckRheSB7XG4gICAgbGV0IF90aW1lID0gbW9tZW50KHRpbWUpO1xuICAgIGxldCBkYXRlID0gbW9tZW50KHRpbWUpO1xuICAgIGxldCBpc1RvZGF5ID0gbW9tZW50KCkuaXNTYW1lKF90aW1lLCAnZGF5cycpO1xuICAgIGxldCBkYXlDb25maWcgPSB0aGlzLmZpbmREYXlDb25maWcoX3RpbWUsIG9wdCk7XG4gICAgbGV0IF9yYW5nZUJlZyA9IG1vbWVudChvcHQuZnJvbSkudmFsdWVPZigpO1xuICAgIGxldCBfcmFuZ2VFbmQgPSBtb21lbnQob3B0LnRvKS52YWx1ZU9mKCk7XG4gICAgbGV0IGlzQmV0d2VlbiA9IHRydWU7XG4gICAgbGV0IGRpc2FibGVXZWUgPSBvcHQ/LmRpc2FibGVXZWVrcz8uaW5kZXhPZihfdGltZS50b0RhdGUoKS5nZXREYXkoKSkgIT09IC0xO1xuICAgIGlmIChfcmFuZ2VCZWcgPiAwICYmIF9yYW5nZUVuZCA+IDApIHtcbiAgICAgIGlmICghb3B0LmNhbkJhY2t3YXJkc1NlbGVjdGVkKSB7XG4gICAgICAgIGlzQmV0d2VlbiA9ICFfdGltZS5pc0JldHdlZW4oX3JhbmdlQmVnLCBfcmFuZ2VFbmQsICdkYXlzJywgJ1tdJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc0JldHdlZW4gPSBtb21lbnQoX3RpbWUpLmlzQmVmb3JlKF9yYW5nZUJlZykgPyBmYWxzZSA6IGlzQmV0d2VlbjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yYW5nZUJlZyA+IDAgJiYgX3JhbmdlRW5kID09PSAwKSB7XG4gICAgICBpZiAoIW9wdC5jYW5CYWNrd2FyZHNTZWxlY3RlZCkge1xuICAgICAgICBsZXQgX2FkZFRpbWUgPSBfdGltZS5hZGQoMSwgJ2RheScpO1xuICAgICAgICBpc0JldHdlZW4gPSAhX2FkZFRpbWUuaXNBZnRlcihfcmFuZ2VCZWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNCZXR3ZWVuID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IF9kaXNhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoZGF5Q29uZmlnICYmIGlzQm9vbGVhbihkYXlDb25maWcuZGlzYWJsZSkpIHtcbiAgICAgIF9kaXNhYmxlID0gZGF5Q29uZmlnLmRpc2FibGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9kaXNhYmxlID0gZGlzYWJsZVdlZSB8fCBpc0JldHdlZW47XG4gICAgfVxuXG4gICAgbGV0IHRpdGxlID0gbmV3IERhdGUodGltZSkuZ2V0RGF0ZSgpLnRvU3RyaW5nKCk7XG4gICAgaWYgKGRheUNvbmZpZyAmJiBkYXlDb25maWcudGl0bGUpIHtcbiAgICAgIHRpdGxlID0gZGF5Q29uZmlnLnRpdGxlO1xuICAgIH0gZWxzZSBpZiAob3B0LmRlZmF1bHRUaXRsZSkge1xuICAgICAgdGl0bGUgPSBvcHQuZGVmYXVsdFRpdGxlO1xuICAgIH1cbiAgICBsZXQgc3ViVGl0bGUgPSAnJztcbiAgICBpZiAoZGF5Q29uZmlnICYmIGRheUNvbmZpZy5zdWJUaXRsZSkge1xuICAgICAgc3ViVGl0bGUgPSBkYXlDb25maWcuc3ViVGl0bGU7XG4gICAgfSBlbHNlIGlmIChvcHQuZGVmYXVsdFN1YnRpdGxlKSB7XG4gICAgICBzdWJUaXRsZSA9IG9wdC5kZWZhdWx0U3VidGl0bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWUsXG4gICAgICBpc1RvZGF5LFxuICAgICAgdGl0bGUsXG4gICAgICBzdWJUaXRsZSxcbiAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgIGlzTGFzdE1vbnRoOiBkYXRlLm1vbnRoKCkgPCAobW9udGggPyBtb250aCA6IDApLFxuICAgICAgaXNOZXh0TW9udGg6IGRhdGUubW9udGgoKSA+IChtb250aCA/IG1vbnRoIDogMCksXG4gICAgICBtYXJrZWQ6IGRheUNvbmZpZyA/IGRheUNvbmZpZy5tYXJrZWQgfHwgZmFsc2UgOiBmYWxzZSxcbiAgICAgIGNzc0NsYXNzOiBkYXlDb25maWcgPyBkYXlDb25maWcuY3NzQ2xhc3MgfHwgJycgOiAnJyxcbiAgICAgIGRpc2FibGU6IF9kaXNhYmxlLFxuICAgICAgaXNGaXJzdDogZGF0ZS5kYXRlKCkgPT09IDEsXG4gICAgICBpc0xhc3Q6IGRhdGUuZGF0ZSgpID09PSBkYXRlLmRheXNJbk1vbnRoKCksXG4gICAgfTtcbiAgfVxuXG4gIGNyZWF0ZUNhbGVuZGFyTW9udGgob3JpZ2luYWw6IENhbGVuZGFyT3JpZ2luYWwsIG9wdDogQ2FsZW5kYXJNb2RhbE9wdGlvbnMpOiBDYWxlbmRhck1vbnRoIHtcbiAgICBsZXQgZGF5czogQXJyYXk8Q2FsZW5kYXJEYXk+ID0gbmV3IEFycmF5KDYpLmZpbGwobnVsbCk7XG4gICAgbGV0IGxlbiA9IG9yaWdpbmFsLmhvd01hbnlEYXlzO1xuICAgIGZvciAobGV0IGkgPSBvcmlnaW5hbC5maXJzdFdlZWs7IGkgPCBsZW4gKyBvcmlnaW5hbC5maXJzdFdlZWs7IGkrKykge1xuICAgICAgbGV0IGl0ZW1UaW1lID0gbmV3IERhdGUob3JpZ2luYWwueWVhciwgb3JpZ2luYWwubW9udGgsIGkgLSBvcmlnaW5hbC5maXJzdFdlZWsgKyAxKS5nZXRUaW1lKCk7XG4gICAgICBkYXlzW2ldID0gdGhpcy5jcmVhdGVDYWxlbmRhckRheShpdGVtVGltZSwgb3B0KTtcbiAgICB9XG5cbiAgICBsZXQgd2Vla1N0YXJ0ID0gb3B0LndlZWtTdGFydDtcblxuICAgIGlmICh3ZWVrU3RhcnQgPT09IDEpIHtcbiAgICAgIGlmIChkYXlzWzBdID09PSBudWxsKSB7XG4gICAgICAgIGRheXMuc2hpZnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRheXMudW5zaGlmdCguLi5uZXcgQXJyYXkoNikuZmlsbChudWxsKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdC5zaG93QWRqYWNlbnRNb250aERheSkge1xuICAgICAgY29uc3QgX2Jvb2xlYW5NYXAgPSBkYXlzLm1hcChlID0+ICEhZSk7XG4gICAgICBjb25zdCB0aGlzTW9udGggPSBtb21lbnQob3JpZ2luYWwudGltZSkubW9udGgoKTtcbiAgICAgIGxldCBzdGFydE9mZnNldEluZGV4ID0gX2Jvb2xlYW5NYXAuaW5kZXhPZih0cnVlKSAtIDE7XG4gICAgICBsZXQgZW5kT2Zmc2V0SW5kZXggPSBfYm9vbGVhbk1hcC5sYXN0SW5kZXhPZih0cnVlKSArIDE7XG4gICAgICBmb3IgKHN0YXJ0T2Zmc2V0SW5kZXg7IHN0YXJ0T2Zmc2V0SW5kZXggPj0gMDsgc3RhcnRPZmZzZXRJbmRleC0tKSB7XG4gICAgICAgIGNvbnN0IGRheUJlZm9yZSA9IG1vbWVudChkYXlzW3N0YXJ0T2Zmc2V0SW5kZXggKyAxXS50aW1lKVxuICAgICAgICAgIC5jbG9uZSgpXG4gICAgICAgICAgLnN1YnRyYWN0KDEsICdkJyk7XG4gICAgICAgIGRheXNbc3RhcnRPZmZzZXRJbmRleF0gPSB0aGlzLmNyZWF0ZUNhbGVuZGFyRGF5KGRheUJlZm9yZS52YWx1ZU9mKCksIG9wdCwgdGhpc01vbnRoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEoX2Jvb2xlYW5NYXAubGVuZ3RoICUgNyA9PT0gMCAmJiBfYm9vbGVhbk1hcFtfYm9vbGVhbk1hcC5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgZm9yIChlbmRPZmZzZXRJbmRleDsgZW5kT2Zmc2V0SW5kZXggPCBkYXlzLmxlbmd0aCArIChlbmRPZmZzZXRJbmRleCAlIDcpOyBlbmRPZmZzZXRJbmRleCsrKSB7XG4gICAgICAgICAgY29uc3QgZGF5QWZ0ZXIgPSBtb21lbnQoZGF5c1tlbmRPZmZzZXRJbmRleCAtIDFdLnRpbWUpXG4gICAgICAgICAgICAuY2xvbmUoKVxuICAgICAgICAgICAgLmFkZCgxLCAnZCcpO1xuICAgICAgICAgIGRheXNbZW5kT2Zmc2V0SW5kZXhdID0gdGhpcy5jcmVhdGVDYWxlbmRhckRheShkYXlBZnRlci52YWx1ZU9mKCksIG9wdCwgdGhpc01vbnRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkYXlzLFxuICAgICAgb3JpZ2luYWw6IG9yaWdpbmFsLFxuICAgIH07XG4gIH1cblxuICBjcmVhdGVNb250aHNCeVBlcmlvZChzdGFydFRpbWU6IG51bWJlciwgbW9udGhzTnVtOiBudW1iZXIsIG9wdDogQ2FsZW5kYXJNb2RhbE9wdGlvbnMpOiBBcnJheTxDYWxlbmRhck1vbnRoPiB7XG4gICAgbGV0IF9hcnJheTogQXJyYXk8Q2FsZW5kYXJNb250aD4gPSBbXTtcblxuICAgIGxldCBfc3RhcnQgPSBuZXcgRGF0ZShzdGFydFRpbWUpO1xuICAgIGxldCBfc3RhcnRNb250aCA9IG5ldyBEYXRlKF9zdGFydC5nZXRGdWxsWWVhcigpLCBfc3RhcnQuZ2V0TW9udGgoKSwgMSkuZ2V0VGltZSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb250aHNOdW07IGkrKykge1xuICAgICAgbGV0IHRpbWUgPSBtb21lbnQoX3N0YXJ0TW9udGgpXG4gICAgICAgIC5hZGQoaSwgJ00nKVxuICAgICAgICAudmFsdWVPZigpO1xuICAgICAgbGV0IG9yaWdpbmFsQ2FsZW5kYXIgPSB0aGlzLmNyZWF0ZU9yaWdpbmFsQ2FsZW5kYXIodGltZSk7XG4gICAgICBfYXJyYXkucHVzaCh0aGlzLmNyZWF0ZUNhbGVuZGFyTW9udGgob3JpZ2luYWxDYWxlbmRhciwgb3B0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnJheTtcbiAgfVxuXG4gIHdyYXBSZXN1bHQob3JpZ2luYWw6IENhbGVuZGFyRGF5W10sIHBpY2tNb2RlOiBzdHJpbmcpIHtcbiAgICBsZXQgcmVzdWx0OiBhbnk7XG4gICAgc3dpdGNoIChwaWNrTW9kZSkge1xuICAgICAgY2FzZSBwaWNrTW9kZXMuU0lOR0xFOlxuICAgICAgICByZXN1bHQgPSB0aGlzLm11bHRpRm9ybWF0KG9yaWdpbmFsWzBdLnRpbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgcGlja01vZGVzLlJBTkdFOlxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgZnJvbTogdGhpcy5tdWx0aUZvcm1hdChvcmlnaW5hbFswXS50aW1lKSxcbiAgICAgICAgICB0bzogdGhpcy5tdWx0aUZvcm1hdCgob3JpZ2luYWxbMV0gfHwgb3JpZ2luYWxbMF0pLnRpbWUpLFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgcGlja01vZGVzLk1VTFRJOlxuICAgICAgICByZXN1bHQgPSBvcmlnaW5hbC5tYXAoZSA9PiB0aGlzLm11bHRpRm9ybWF0KGUudGltZSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlc3VsdCA9IG9yaWdpbmFsO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgbXVsdGlGb3JtYXQodGltZTogbnVtYmVyKTogQ2FsZW5kYXJSZXN1bHQge1xuICAgIGNvbnN0IF9tb21lbnQgPSBtb21lbnQodGltZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWU6IF9tb21lbnQudmFsdWVPZigpLFxuICAgICAgdW5peDogX21vbWVudC51bml4KCksXG4gICAgICBkYXRlT2JqOiBfbW9tZW50LnRvRGF0ZSgpLFxuICAgICAgc3RyaW5nOiBfbW9tZW50LmZvcm1hdChkZWZhdWx0cy5EQVRFX0ZPUk1BVCksXG4gICAgICB5ZWFyczogX21vbWVudC55ZWFyKCksXG4gICAgICBtb250aHM6IF9tb21lbnQubW9udGgoKSArIDEsXG4gICAgICBkYXRlOiBfbW9tZW50LmRhdGUoKSxcbiAgICB9O1xuICB9XG59XG4iXX0=